// <autogenerated>
// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;

namespace PingLang.Core.Lexing
{
    public static class Tokens
    {
		public const int EOF = -1;
		public const int WS = 0;
		public const int T = 1;
		public const int ACTOR_END = 2;
		public const int LISTEN = 3;
		public const int WHEN = 4;
		public const int MESSAGE = 5;
		public const int PRINT = 6;
		public const int PINGED = 7;
		public const int STARTING = 8;
		public const int PING = 9;
		public const int WAIT = 10;
		public const int SEND = 11;
		public const int TO_PORT = 12;
		public const int ERROR = 13;
		public const int COUNT = 14;
		public const int RESET = 15;
		public const int COUNTER = 16;
		public const int END = 17;
		public const int GT = 18;
		public const int ID = 19;
		public const int COMMENT = 20;
		public const int INT = 21;
		public const int STRING = 22;


		public static readonly Dictionary<int, string> TokenNames = new Dictionary<int, string>
        {
			{EOF, "EOF"},
			{WS, "WS"},
			{T, "T"},
			{ACTOR_END, "ACTOR_END"},
			{LISTEN, "LISTEN"},
			{WHEN, "WHEN"},
			{MESSAGE, "MESSAGE"},
			{PRINT, "PRINT"},
			{PINGED, "PINGED"},
			{STARTING, "STARTING"},
			{PING, "PING"},
			{WAIT, "WAIT"},
			{SEND, "SEND"},
			{TO_PORT, "TO_PORT"},
			{ERROR, "ERROR"},
			{COUNT, "COUNT"},
			{RESET, "RESET"},
			{COUNTER, "COUNTER"},
			{END, "END"},
			{GT, "GT"},
			{ID, "ID"},
			{COMMENT, "COMMENT"},
			{INT, "INT"},
			{STRING, "STRING"},
        
        };
                
        public static readonly List<TokenRecognizer> All = new List<TokenRecognizer>
        {
			new TokenRecognizer(WS, "^([ \\t])+", false),
			new TokenRecognizer(T, "^[\\r\\n;]+", true),
			new TokenRecognizer(ACTOR_END, "^\\.", true),
			new TokenRecognizer(LISTEN, "^listen on port", true),
			new TokenRecognizer(WHEN, "^when", true),
			new TokenRecognizer(MESSAGE, "^message", true),
			new TokenRecognizer(PRINT, "^print", true),
			new TokenRecognizer(PINGED, "^pinged", true),
			new TokenRecognizer(STARTING, "^starting", true),
			new TokenRecognizer(PING, "^ping", true),
			new TokenRecognizer(WAIT, "^wait", true),
			new TokenRecognizer(SEND, "^send", true),
			new TokenRecognizer(TO_PORT, "^to port", true),
			new TokenRecognizer(ERROR, "^error", true),
			new TokenRecognizer(COUNT, "^count every", true),
			new TokenRecognizer(RESET, "^reset counter", true),
			new TokenRecognizer(COUNTER, "^counter", true),
			new TokenRecognizer(END, "^end", true),
			new TokenRecognizer(GT, "^\\>", true),
			new TokenRecognizer(ID, "^([a-zA-Z])+([\\w\\-])*", true),
			new TokenRecognizer(COMMENT, "^[(\\/\\/)#][^\\r\\n]*", true),
			new TokenRecognizer(INT, "^(\\d)+", true),
			new TokenRecognizer(STRING, "^\"[^\\r\\n\"]*\"", true),

        };
    }
}
